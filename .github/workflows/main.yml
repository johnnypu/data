# workflow name
name: CI/CD Pipeline
on:
  # Manually trigger workflow name
  workflow_dispatch:
  # Trigger the workflow on push from the main branch
  push:
    branches:
      - main
jobs:
  # Test's job
  tests:
    name: Unit test
    # Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    # Jobs's steps
    steps:
      # check-out repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v1
      # set up jdk11
      - name: set up JDK
        uses: actions/setup-java@v1
        with: 
          java-version: '11'
      # set up maven cache
      - name: cache maven packages
        # this action allows caching dependencies and build outputs to improve workflow execution time
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      # Run Tests
      - name: Run Tests
        run: mvn -B test
  # Sonar's Job
  sonar:
    # depends on test's job
    needs: tests
    name: SonarCloud analysis
    # run on ubuntu using the latest version
    runs-on: ubuntu-latest
    # job's steps
    steps:
      # check-out repository under $GITHUB_WORKSPACE, so the workflow can access it
      - uses: actions/checkout@v1
      # set up JDK11
      - name: set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      # set up sonarcloud cache
      - name: cache sonarcloud packages
        # this action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v1
        with: 
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      # set up maven cache
      - name: cache maven packages
        # this action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      # analyze project with sonarcloud
      - name: analyze with sonarcloud
        run: mvn -B verify sonar:sonar -Dsonar.projectKey=johnnypu_data -Dsonar.organization=johnnypu -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  # Build Job
  build:
    # depends on sonar's job
    needs: sonar
    name: Build
    # run on ubuntu using the latest version
    runs-on: ubuntu-latest
    steps:
      # check-out the repository under $GITHUB_WORKSPAC, so the workflow can access it
      - uses: actions/checkout@v1
      # set up JDK 11
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      # set up maven cache
      - name: cache maven packages
        # this actions allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      # build the application using maven
      - name: build with maven
        run: mvn -B clean package -DskipTests --file pom.xml
      # build the application using maven
      - name: upload jar
        # this uploads artifacts from your workflow allowing you to share data between jobs and store data once a workflow is complete.
        uses: actions/upload-artifact@v2
        with:
          # set artifact name
          name: artifact
          # from this path
          path: target/data-0.0.1-SNAPSHOT.jar
  # Deploy Job
  deploy:
    # depends on build's job
    needs: build
    name: Deploy
    # run on ubuntu using the latest version
    runs-on: ubuntu-latest
    steps:
      - name: download jar
        # download the artifact wich was uploaded in the build's job
        uses: actions/download-artifact@v2
        with:
          name: artifact
      # deploy the artifact (jar) into aws beanstalk
      - name: deploy to EB
        uses: einaregilsson/beanstalk-deploy@v20
        with: 
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: spring-boot-deploy
          environment_name: Springbootdeploy-env
          version_label: ${{ github.SHA }}
          region: us-east-1
          deployment_package: data-0.0.1-SNAPSHOT.jar